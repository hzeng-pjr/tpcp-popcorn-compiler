Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg2 [32r,48r:0)  0@32r
%vreg3 [48r,64r:0)  0@48r
%vreg5 [112r,128r:0)  0@112r
RegMasks: 80r
********** MACHINEINSTRS **********
# Machine code for function main: Post SSA

0B	BB#0: derived from LLVM BB %entry
16B		ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
32B		%vreg2<def> = MOV32ri64 <ga:@str>; GR32:%vreg2
48B		%vreg3<def> = SUBREG_TO_REG 0, %vreg2, 4; GR64:%vreg3 GR32:%vreg2
64B		%RDI<def> = COPY %vreg3; GR64:%vreg3
80B		CALL64pcrel32 <ga:@puts>, <regmask>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def,dead>
96B		ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
112B		%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5
128B		%EAX<def> = COPY %vreg5; GR32:%vreg5
144B		RETQ %EAX<kill>

# End machine code for function main.

********** SIMPLE REGISTER COALESCING **********
********** Function: main
********** JOINING INTERVALS ***********
entry:
48B	%vreg3<def> = SUBREG_TO_REG 0, %vreg2, 4; GR64:%vreg3 GR32:%vreg2
	Considering merging to GR64_with_sub_8bit with %vreg2 in %vreg3:sub_32bit
		RHS = %vreg2 [32r,48r:0)  0@32r
		LHS = %vreg3 [48r,64r:0)  0@48r
		merge %vreg3:0@48r into %vreg2:0@32r --> @32r
		erased:	48r	%vreg3<def> = SUBREG_TO_REG 0, %vreg2, 4; GR64:%vreg3 GR32:%vreg2
AllocationOrder(GR64) = [ %RAX %RCX %RDX %RSI %RDI %R8 %R9 %R10 %R11 %RBX %R14 %R15 %R12 %R13 %RBP ]
AllocationOrder(GR64_with_sub_8bit) = [ %RAX %RCX %RDX %RSI %RDI %R8 %R9 %R10 %R11 %RBX %R14 %R15 %R12 %R13 %RBP ]
		updated: 32B	%vreg3:sub_32bit<def,read-undef> = MOV32ri64 <ga:@str>; GR64_with_sub_8bit:%vreg3
	Success: %vreg2:sub_32bit -> %vreg3
	Result = %vreg3 [32r,64r:0)  0@32r
64B	%RDI<def> = COPY %vreg3; GR64_with_sub_8bit:%vreg3
	Considering merging %vreg3 with %RDI
	Can only merge into reserved registers.
Remat: %EDI<def,dead> = MOV32ri64 <ga:@str>, %RDI<imp-def>
Shrink: %vreg3 [32r,64r:0)  0@32r
All defs dead: 32r	%vreg3:sub_32bit<def,read-undef,dead> = MOV32ri64 <ga:@str>; GR64_with_sub_8bit:%vreg3
Shrunk: %vreg3 [32r,32d:0)  0@32r
Deleting dead def 32r	%vreg3:sub_32bit<def,read-undef,dead> = MOV32ri64 <ga:@str>; GR64_with_sub_8bit:%vreg3
128B	%EAX<def> = COPY %vreg5; GR32:%vreg5
	Considering merging %vreg5 with %EAX
	Can only merge into reserved registers.
Remat: %EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>
Shrink: %vreg5 [112r,128r:0)  0@112r
All defs dead: 112r	%vreg5<def,dead> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5
Shrunk: %vreg5 [112r,112d:0)  0@112r
Deleting dead def 112r	%vreg5<def,dead> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5
Trying to inflate 0 regs.
********** INTERVALS **********
RegMasks: 80r
********** MACHINEINSTRS **********
# Machine code for function main: Post SSA

0B	BB#0: derived from LLVM BB %entry
16B		ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
64B		%EDI<def,dead> = MOV32ri64 <ga:@str>, %RDI<imp-def>
80B		CALL64pcrel32 <ga:@puts>, <regmask>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def,dead>
96B		ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
128B		%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>
144B		RETQ %EAX<kill>

# End machine code for function main.

AllocationOrder(GR32) = [ %EAX %ECX %EDX %ESI %EDI %R8D %R9D %R10D %R11D %EBX %EBP %R14D %R15D %R12D %R13D ]
AllocationOrder(GR16) = [ %AX %CX %DX %SI %DI %R8W %R9W %R10W %R11W %BX %BP %R14W %R15W %R12W %R13W ]
AllocationOrder(GR8) = [ %AL %CL %DL %SIL %DIL %R8B %R9B %R10B %R11B %BL %BPL %R14B %R15B %R12B %R13B ]
********** GREEDY REGISTER ALLOCATION **********
********** Function: main
********** INTERVALS **********
RegMasks: 80r
********** MACHINEINSTRS **********
# Machine code for function main: Post SSA

0B	BB#0: derived from LLVM BB %entry
16B		ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
64B		%EDI<def,dead> = MOV32ri64 <ga:@str>, %RDI<imp-def>
80B		CALL64pcrel32 <ga:@puts>, <regmask>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def,dead>
96B		ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
128B		%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>
144B		RETQ %EAX<kill>

# End machine code for function main.

********** REWRITE VIRTUAL REGISTERS **********
********** Function: main
********** REGISTER MAP **********

0B	BB#0: derived from LLVM BB %entry
16B		ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
64B		%EDI<def,dead> = MOV32ri64 <ga:@str>, %RDI<imp-def>
80B		CALL64pcrel32 <ga:@puts>, <regmask>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def,dead>
96B		ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
128B		%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>
144B		RETQ %EAX<kill>
> ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
> %EDI<def,dead> = MOV32ri64 <ga:@str>, %RDI<imp-def>
> CALL64pcrel32 <ga:@puts>, <regmask>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def,dead>
> ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
> %EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>
> RETQ %EAX<kill>
